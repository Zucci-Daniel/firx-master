//MAKE SURE TO REMOVE THE ALLFILES AND IMPORT TRADITIONALLY IF YOU CAN'T GET AWAY FROM REQUIRE CIRCLES
create a file for all the routes names,storage keys















import {
  React,
  StyleSheet,
  View,
  Text,
  FlatList,
  useEffect,
  useState,
  Button,
} from '../../../imports/all_RnComponents';
import {SponsorPost} from '../../../imports/all_files';
import {universalPadding, colors} from '../../../config/config';
import firestore from '@react-native-firebase/firestore';

const Home = ({navigation}) => {
  const [allUsers, setAllUsers] = useState([]);

  useEffect(() => {
    console.log('runnning');
    firestore()
      .collection('students')
      .onSnapshot(
        querySnapshot => {
          console.log('fetching data again');
          console.log('Total users: ', querySnapshot.size);

          querySnapshot.forEach(documentSnapshot => {
            console.log(
              'User DETAIL INSIDE HOME: ',
              documentSnapshot.id,
              documentSnapshot.data(),
            );
          });
        },
        error => console.log(error.message, ' failed again!!'),
      );
  }, []);

  const addUser = () => {
    firestore()
      .collection('students')
      .set({
        name: 'emeka',
        gender: 'robot',
      })
      .then(() => console.log('added'))
      .catch(error => console.log(error.message, ' cant add a user'));
  };

  const updateUser = id => {
    firestore()
      .collection('students')
      .doc(id)
      .update({
        name: 'changedAgain',
        fruit: ['orange', 'mango'],
      })
      .then(() => console.log(' setted!'))
      .catch(error => console.log('failed, ', error.message));
  };

  const deleteUser = id => {
    firestore()
      .collection('students')
      .doc(id)
      .delete()
      .then(() => console.log(' deleted!'))
      .catch(error => console.log('failed, ', error.message));
  };

  const addToArray = id => {
    firestore()
      .collection('students')
      .doc(id)
      .update({
        fruit: firestore.FieldValue.arrayUnion('red', 'taw'),
        address: {house: {name: 'hilson', jobAddress: {home: 'kanny'}}},
      });
  };
  const removeFromArray = id => {
    firestore()
      .collection('students')
      .doc(id)
      .update({
        fruit: firestore.FieldValue.arrayRemove('red'),
      });
  };

  return (
    <View style={styles.container}>
      <FlatList
        data={allUsers}
        keyExtractor={item => item.id}
        renderItem={({item}, index) => (
          <SponsorPost
            mini={false}
            profileImage={item.profileImage}
            name={item.firstName}
          />
        )}
      />

      <Button title="add user" onPress={addUser} />
      <Button
        title="update user"
        onPress={() => updateUser('2LUfj1ufMWgX2e0lxaHg')}
      />
      <Button
        title="delete user"
        onPress={() => deleteUser('jYJb9ZIhvLpsCBlCd7pv')}
      />
      <Button
        title="add To Array"
        onPress={() => addToArray('2LUfj1ufMWgX2e0lxaHg')}
      />
      <Button
        title="Remove from Array"
        onPress={() => removeFromArray('2LUfj1ufMWgX2e0lxaHg')}
      />
    </View>
  );
};

export default Home;

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: colors.pureWhite,
  },
  heading: {
    padding: universalPadding / 6,
    textAlign: 'center',
    fontSize: 14,
  },
});









////for third party AppCarousel



import {
  React,
  StyleSheet,
  View,
  Text,
  useRef,
  useState,
} from '../imports/all_RnComponents';
import {Headline, Subheading, Badge} from '../imports/all_packages';
import {
  universalPadding,
  width,
  height,
  sMargin,
  colors,
} from '../config/config';

import {SliderBox} from 'react-native-image-slider-box';
import {TouchableOpacity} from 'react-native';

export default AppCarousel = ({
  useData = [1, 2, 3, 4],
  height = 400,
  onLongPress,
}) => {
  const [currentImage, setCurrentImage] = useState(1);

  return (
    <View style={styles.container}>
      {useData.length > 1 && (
        <Text
          style={
            styles.imageIndicator
          }>{`${currentImage}/${useData.length}`}</Text>
      )}
      <SliderBox
        images={useData}
        sliderBoxHeight={height}
        currentImageEmitter={index => setCurrentImage(index + 1)}
        dotColor="transparent"
        inactiveDotColor="transparent"
        activeOpacity={1}
        parentWidth={width}
        onLongPress={onLongPress}
      />
    </View>
  );
};

const styles = StyleSheet.create({
  imageIndicator: {
    color: 'black',
    fontWeight: '700',
    fontStyle: 'italic',
    fontSize: 10,
    position: 'absolute',
    right: 0,
    top: 0,
    zIndex: 10,
    backgroundColor: 'rgba(225,225,225,0.6)',
    padding: 5,
    borderRadius: 2,
    margin: 5,
  },
});


/////for android>app>build.gradle






/*

apply plugin: "com.android.application"

import com.android.build.OutputFile

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation. If none specified and
 *   // "index.android.js" exists, it will be used. Otherwise "index.js" is
 *   // default. Can be overridden with ENTRY_FILE environment variable.
 *   entryFile: "index.android.js",
 *
 *   // https://reactnative.dev/docs/performance#enable-the-ram-format
 *   bundleCommand: "ram-bundle",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // whether to disable dev mode in custom build variants (by default only disabled in release)
 *   // for example: to disable dev mode in the staging build type (if configured)
 *   devDisabledInStaging: true,
 *   // The configuration property can be in the following formats
 *   //         'devDisabledIn${productFlavor}${buildType}'
 *   //         'devDisabledIn${buildType}'
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"],
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

project.ext.react = [
    enableHermes: false,  // clean and rebuild if changing
]

apply from: "../../node_modules/react-native/react.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

/**
 * The preferred build flavor of JavaScriptCore.
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US.  Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc:+'

/**
 * Whether to enable the Hermes VM.
 *
 * This should be set on project.ext.react and that value will be read here. If it is not set
 * on project.ext.react, JavaScript will not be compiled to Hermes Bytecode
 * and the benefits of using Hermes will therefore be sharply reduced.
 */
def enableHermes = project.ext.react.get("enableHermes", false);

/**
 * Architectures to build native code for in debug.
 */
def nativeArchitectures = project.getProperties().get("reactNativeDebugArchitectures")

android {
    ndkVersion rootProject.ext.ndkVersion

    compileSdkVersion rootProject.ext.compileSdkVersion

    defaultConfig {
        applicationId "com.firx"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
        }
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            if (nativeArchitectures) {
                ndk {
                    abiFilters nativeArchitectures.split(',')
                }
            }
        }
        release {
            // Caution! In production, you need to generate your own keystore file.
            // see https://reactnative.dev/docs/signed-apk-android.
            signingConfig signingConfigs.debug
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }

    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // https://developer.android.com/studio/build/configure-apk-splits.html
            // Example: versionCode 1 will generate 1001 for armeabi-v7a, 1002 for x86, etc.
            def versionCodes = ["armeabi-v7a": 1, "x86": 2, "arm64-v8a": 3, "x86_64": 4]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        defaultConfig.versionCode * 1000 + versionCodes.get(abi)
            }

        }
    }
}

dependencies {
    implementation "androidx.multidex:multidex:2.0.1" //zucci
    implementation fileTree(dir: "libs", include: ["*.jar"])
    //noinspection GradleDynamicVersion
    implementation "com.facebook.react:react-native:+"  // From node_modules

    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.0.0"
    implementation project(':react-native-gesture-handler')//if failed, delete this line:add it due to react-native-image-slider-box

     implementation "androidx.appcompat:appcompat:1.0.0"

    debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}") {
        exclude group:'com.facebook.fbjni'
    }

    debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.facebook.flipper'
        exclude group:'com.squareup.okhttp3', module:'okhttp'
    }

    debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.facebook.flipper'
    }

    if (enableHermes) {
        def hermesPath = "../../node_modules/hermes-engine/android/";
        debugImplementation files(hermesPath + "hermes-debug.aar")
        releaseImplementation files(hermesPath + "hermes-release.aar")
    } else {
        implementation jscFlavor
    }
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.implementation
    into 'libs'
}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)
apply plugin: 'com.google.gms.google-services'


*/